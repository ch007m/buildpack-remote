apiVersion: "tekton.dev/v1"
kind: "PipelineRun"
metadata:
  annotations:
    build.appstudio.redhat.com/target_branch: "{{target_branch}}"
    build.appstudio.redhat.com/commit_sha: "{{revision}}"
    pipelinesascode.tekton.dev/on-cel-expression: "event == 'push' && target_branch\
      \ == 'main'"
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    build.appstudio.openshift.io/repo: "https://github.com/paketo-community/builder-ubi-base?rev={{revision}}"
  labels:
    appstudio.openshift.io/application: "buildpack-remote"
    pipelines.appstudio.openshift.io/type: "build"
    pipelines.openshift.io/strategy: "remote-build"
    appstudio.openshift.io/component: "buildpack-remote"
    pipelines.openshift.io/used-by: "build-cloud"
    pipelines.openshift.io/runtime: "java"
  name: "buildpack-remote"
  namespace: "cmoullia-tenant"
spec:
  params:
  - name: "git-url"
    value: "{{source_url}}"
  - name: "revision"
    value: "{{revision}}"
  - name: "image-expires-after"
    value: "5d"
  - name: "build-image-index"
    value: ""
  - name: "build-source-image"
    value: "false"
  - name: "prefetch-input"
    value: ""
  - name: "output-image"
    value: "quay.io/redhat-user-workloads/cmoullia-tenant/konflux-demo/buildpack-remote:{{revision}}"
  pipelineSpec:
    finally:
    - name: "show-sbom"
      params:
      - name: "IMAGE_URL"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-show-sbom:0.1"
        - name: "name"
          value: "show-sbom"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "summary"
      params:
      - name: "pipelinerun-name"
        value: "$(context.pipelineRun.name)"
      - name: "git-url"
        value: "$(tasks.git-clone.results.url)?rev=$(tasks.git-clone.results.commit)"
      - name: "image-url"
        value: "$(params.output-image)"
      - name: "build-task-status"
        value: "$(tasks.build-container.status)"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-summary:0.2"
        - name: "name"
          value: "summary"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "workspace"
        workspace: "workspace"
    results:
    - name: "IMAGE_URL"
      value: "$(tasks.build-container.results.IMAGE_URL)"
    - name: "IMAGE_DIGEST"
      value: "$(tasks.build-container.results.IMAGE_DIGEST)"
    - name: "BASE_IMAGES_DIGESTS"
      value: "$(tasks.build-container.results.BASE_IMAGES_DIGESTS)"
    - name: "CHAINS-GIT_URL"
      value: "$(tasks.git-clone.results.url)"
    - name: "CHAINS-GIT_COMMIT"
      value: "$(tasks.git-clone.results.commit)"
    tasks:
    - name: "init"
      params:
      - name: "image-url"
        value: "$(params.output-image)"
      - name: "rebuild"
        value: "$(params.rebuild)"
      - name: "skip-checks"
        value: "$(params.skip-checks)"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-init:0.2"
        - name: "name"
          value: "init"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "git-clone"
      params:
      - name: "url"
        value: "$(params.git-url)"
      runAfter:
      - "init"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-git-clone:0.1"
        - name: "name"
          value: "git-clone"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "output"
        workspace: "workspace"
      - name: "basic-auth"
        workspace: "git-auth"
    - name: "prefetch-dependencies"
      params:
      - name: "input"
        value: "$(params.prefetch-input)"
      runAfter:
      - "git-clone"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-prefetch-dependencies:0.1"
        - name: "name"
          value: "prefetch-dependencies"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "source"
        workspace: "workspace"
      - name: "git-basic-auth"
        workspace: "git-auth"
    - name: "build-container"
      params:
      - name: "PLATFORM"
        value: "linux-mlarge/amd64"
      - name: "BUILDER_IMAGE"
        value: "quay.io/konflux-ci/buildah-task:latest@sha256:860a239c5f25376a435a514ae6d53a5c75b1fa492461d17774e9b7cb32d1e275"
      - name: "PACK_CLI_VERSION"
        value: "v0.35.1"
      - name: "GO_VERSION"
        value: "1.23.0"
      - name: "BUILD_ARGS"
        value:
        - "-v"
      runAfter:
      - "prefetch-dependencies"
      taskSpec:
        results:
        - description: "Image repository where the built image was pushed"
          name: "IMAGE_URL"
        - description: "Digest of the image just built"
          name: "IMAGE_DIGEST"
        - description: "Digests of the base images used for build"
          name: "BASE_IMAGES_DIGESTS"
        stepTemplate:
          env:
          - name: "FOO"
            value: "bar"
          - name: "BAR"
            value: "foo"
          - name: "BUILDER_IMAGE"
            value: "$(params.BUILDER_IMAGE)"
          - name: "PLATFORM"
            value: "$(params.PLATFORM)"
          - name: "IMAGE"
            value: "$(params.output-image)"
          - name: "PACK_CLI_VERSION"
            value: "$(params.PACK_CLI_VERSION)"
          - name: "GO_VERSION"
            value: "$(params.GO_VERSION)"
        steps:
        - args:
          - "$(params.BUILD_ARGS[*])"
          image: "quay.io/konflux-ci/buildah-task:latest@sha256:860a239c5f25376a435a514ae6d53a5c75b1fa492461d17774e9b7cb32d1e275"
          name: "run-script"
          script: "#!/usr/bin/env bash\n#set -o verbose\nset -eu\nset -o pipefail\n\
            \nmkdir -p ~/.ssh\nif [ -e \"/ssh/error\" ]; then\n  #no server could\
            \ be provisioned\n  cat /ssh/error\nexit 1\nelif [ -e \"/ssh/otp\" ];\
            \ then\n  curl --cacert /ssh/otp-ca -XPOST -d @/ssh/otp $(cat /ssh/otp-server)\
            \ >~/.ssh/id_rsa\n  echo \"\" >> ~/.ssh/id_rsa\nelse\n  cp /ssh/id_rsa\
            \ ~/.ssh\nfi\nchmod 0400 ~/.ssh/id_rsa\n\nexport BUILD_ARGS=\"$@\"\nexport\
            \ SSH_HOST=$(cat /ssh/host)\nexport BUILD_DIR=$(cat /ssh/user-dir)\nexport\
            \ SSH_ARGS=\"-o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o\
            \ ServerAliveCountMax=10\"\n\nmkdir -p scripts\n\nPORT_FORWARD=\"\"\n\
            PODMAN_PORT_FORWARD=\"\"\n\necho \"$BUILD_DIR\"\nssh $SSH_ARGS \"$SSH_HOST\"\
            \ mkdir -p \"$BUILD_DIR/workspaces\" \"$BUILD_DIR/scripts\" \"$BUILD_DIR/volumes\"\
            \n\necho \"rsync shared folders ...\"\nrsync -ra \"/shared/\" \"$SSH_HOST:$BUILD_DIR/volumes/shared/\"\
            \nrsync -ra \"/tekton/results/\" \"$SSH_HOST:$BUILD_DIR/results/\"\n\n\
            cat >scripts/script-build.sh <<'REMOTESSHEOF'\n#!/bin/sh\n\n# Set the\
            \ env vars here as stepTemplate don't work\n# export BUILDER_IMAGE=$(params.BUILDER_IMAGE)\n\
            # export PLATFORM=$(params.PLATFORM)\n# export IMAGE=$(params.output-image)\n\
            # export PACK_CLI_VERSION=$(params.PACK_CLI_VERSION)\n# export GO_VERSION=$(params.GO_VERSION)\n\
            \nTEMP_DIR=\"$HOME/tmp\"\nUSER_BIN_DIR=\"$HOME/bin\"\nBUILDPACK_PROJECTS=\"\
            $HOME/buildpack-repo\"\n\necho \"## Start :: Echo foo, bar env var\"\n\
            echo $FOO, $BAR\necho \"## End :: Echo foo, bar env var\"\n\nmkdir -p\
            \ ${TEMP_DIR}\nmkdir -p ${USER_BIN_DIR}\nmkdir -p ${BUILDPACK_PROJECTS}\n\
            mkdir -p ${HOME}/shared\n\nexport PATH=$PATH:${USER_BIN_DIR}\n\necho \"\
            ### Podman status ###\"\npodman version\n\necho \"## Status of the podman\
            \ service ##\"\nsystemctl --user start podman.socket\nsystemctl status\
            \ podman.socket\n# ls -la $XDG_RUNTIME_DIR/podman\n\n#echo \"## Launch\
            \ socat to expose the podman socket\"\n#socat TCP-LISTEN:2376,reuseaddr,fork,bind=0.0.0.0\
            \ unix:/run/user/1000/podman/podman.sock &\n\n#echo \"IP address of the\
            \ host machine\"\n#HOST_IP=$(hostname -I | awk '{print $1}')\n#echo \"\
            Host IP: $HOST_IP\"\n\n# echo \"Hack to be able to install buildah ...\"\
            \n# sudo podman run -v /etc:/hostetc ubi9 sed -s 's|usr/bin/podman|usr/bin/dnf\
            \ /usr/bin/podman|g'\n# sudo podman run -v /etc:/hostetc ubi9 cat /etc/sudoers\n\
            # sudo dnf -y install buildah\n\ncurl -sSL \"https://github.com/buildpacks/pack/releases/download/${PACK_CLI_VERSION}/pack-${PACK_CLI_VERSION}-linux.tgz\"\
            \ | tar -C ${TEMP_DIR} --no-same-owner -xzv pack\nmv ${TEMP_DIR}/pack\
            \ ${USER_BIN_DIR}\n\necho \"### Pack version ###\"\npack --version\npack\
            \ config experimental true\n\necho \"### Go version ###\"\ncurl -sSL \"\
            https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz\" | tar -C ${TEMP_DIR}\
            \ -xz go\nmkdir -p ${USER_BIN_DIR}/go\nmv ${TEMP_DIR}/go ${USER_BIN_DIR}\n\
            chmod +x ${USER_BIN_DIR}/go\n\nmkdir -p $HOME/workspace\nexport GOPATH=$HOME/workspace\n\
            export GOROOT=${USER_BIN_DIR}/go\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin\n\
            go version\n\necho \"### Build the builder image using pack\"\ncurl -sSL\
            \ https://github.com/paketo-community/builder-ubi-base/tarball/main |\
            \ tar -xz -C ${TEMP_DIR}\nmv ${TEMP_DIR}/paketo-community-builder-ubi-base-*\
            \ ${BUILDPACK_PROJECTS}/builder-ubi-base\ncd ${BUILDPACK_PROJECTS}/builder-ubi-base\n\
            \n# Not needed as we pass the BUIDL_ARGS using Tekton's env var\n# BUILD_ARGS=()\n\
            #for build_arg in \"$@\"; do\n#  BUILD_ARGS+=(\"$build_arg\")\n#done\n\
            \n#echo \"Build arguments to be passed to the pack CLI\"\n#for arg in\
            \ \"${BUILD_ARGS[@]}\"; do\n#  echo \"arg: $arg\"\n#done\n\nset -o verbose\n\
            # export DOCKER_HOST=tcp://${HOST_IP}:2376\n\nexport DOCKER_HOST=unix://$XDG_RUNTIME_DIR/podman/podman.sock\n\
            pack builder create ${IMAGE} --config builder.toml \"${BUILD_ARGS[@]}\"\
            \n\ncontainer=$(podman create ${IMAGE})\necho \"Container: $container\"\
            \n\ntouch ${HOME}/shared/container_path\npodman unshare\npodman mount\
            \ $container | tee ${HOME}/shared/container_path\n# delete symlinks -\
            \ they may point outside the container rootfs, messing with SBOM scanners\n\
            find $(cat ${HOME}/shared/container_path) -xtype l -delete\necho $container\
            \ > ${HOME}/shared/container_name\n\npodman push \"$IMAGE\" \"oci:konflux-final-image:$IMAGE\"\
            \necho \"## List konflux-final-image\"\nls -la konflux-final-image\n\n\
            echo \"## List ${HOME}/shared/container_path\"\nls -la ${HOME}/shared/container_path\n\
            \necho \"## Show ${HOME}/shared/container_name\"\ncat ${HOME}/shared/container_name\n\
            set +o verbose\n\nREMOTESSHEOF\nchmod +x scripts/script-build.sh\n\nrsync\
            \ -ra scripts \"$SSH_HOST:$BUILD_DIR\"\nrsync -ra \"$HOME/.docker/\" \"\
            $SSH_HOST:$BUILD_DIR/.docker/\"\n\nssh $SSH_ARGS \"$SSH_HOST\" \\\n  \"\
            FOO=${FOO} \n   BAR=${BAR}\n   BUILDER_IMAGE=$BUILDER_IMAGE\n   PLATFORM=$PLATFORM\n\
            \   IMAGE=$IMAGE\n   PACK_CLI_VERSION=$PACK_CLI_VERSION\n   GO_VERSION=$GO_VERSION\n\
            \   BUILD_ARGS=$BUILD_ARGS\n   scripts/script-build.sh\"\n\n# DON'T WORK\
            \ AS PACK CANNOT ACCESS DOCKER HOST\n# ssh $SSH_ARGS \"$SSH_HOST\" $PORT_FORWARD\
            \ podman run $PODMAN_PORT_FORWARD \\\n#    -v \"$BUILD_DIR/scripts:/scripts:Z\"\
            \ \\\n#    -v \"$BUILD_DIR/.docker/:/root/.docker:Z\" \\\n#    -v \"$BUILD_DIR/volumes/shared:/shared:Z\"\
            \ \\\n#    --user=0 --rm \"$BUILDER_IMAGE\" /scripts/script-build.sh\n\
            \necho -n \"URL of the image build is : quarkus-hello:1.0\" | tee \"$(results.IMAGE_URL.path)\"\
            \necho -n \"sha256ddddddddddddddddddddd\" | tee \"$(results.IMAGE_DIGEST.path)\"\
            \necho -n \"sha256eeeeeeeeeeeeeeeeeeeeee\" | tee \"$(results.BASE_IMAGES_DIGESTS.path)\"\
            \n\nrsync -ra \"$SSH_HOST:$BUILD_DIR/shared/\" /shared/\nrsync -ra \"\
            $SSH_HOST:$BUILD_DIR/results/\" \"/tekton/results/\"\n"
          volumeMounts:
          - mountPath: "/ssh"
            name: "ssh"
            readOnly: true
          - mountPath: "/shared"
            name: "shared"
            readOnly: false
        volumes:
        - name: "ssh"
          secret:
            secretName: "multi-platform-ssh-$(context.taskRun.name)"
        - emptyDir: {}
          name: "shared"
      workspaces:
      - name: "source"
        workspace: "workspace"
    - name: "build-image-index"
      params:
      - name: "IMAGE"
        value: "$(params.output-image)"
      - name: "COMMIT_SHA"
        value: "$(tasks.git-clone.results.commit)"
      - name: "IMAGE_EXPIRES_AFTER"
        value: "$(params.image-expires-after)"
      - name: "ALWAYS_BUILD_INDEX"
        value: "$(params.build-image-index)"
      - name: "IMAGES"
        value:
        - "$(tasks.build-container.results.IMAGE_URL)@$(tasks.build-container.results.IMAGE_DIGEST)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-build-image-index:0.1"
        - name: "name"
          value: "build-image-index"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "workspace"
        workspace: "workspace"
    - name: "source-build"
      params:
      - name: "BINARY_IMAGE"
        value: "$(params.output-image)"
      - name: "BASE_IMAGES"
        value: "$(tasks.build-container.results.BASE_IMAGES_DIGESTS)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-source-build:0.1"
        - name: "name"
          value: "source-build"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "workspace"
        workspace: "workspace"
    - name: "clair-scan"
      params:
      - name: "image-digest"
        value: "$(tasks.build-container.results.IMAGE_DIGEST)"
      - name: "image-url"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-clair-scan:0.1"
        - name: "name"
          value: "clair-scan"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "ecosystem-cert-preflight-checks"
      params:
      - name: "image-url"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-ecosystem-cert-preflight-checks:0.1"
        - name: "name"
          value: "ecosystem-cert-preflight-checks"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "sast-snyk-check"
      params:
      - name: "image-digest"
        value: "$(tasks.build-container.results.IMAGE_DIGEST)"
      - name: "image-url"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "git-clone"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-sast-snyk-check:0.2"
        - name: "name"
          value: "sast-snyk-check"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "workspace"
        workspace: "workspace"
    - name: "clamav-scan"
      params:
      - name: "image-digest"
        value: "$(tasks.build-container.results.IMAGE_DIGEST)"
      - name: "image-url"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-clamav-scan:0.1"
        - name: "name"
          value: "clamav-scan"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "sbom-json-check"
      params:
      - name: "IMAGE_DIGEST"
        value: "$(tasks.build-container.results.IMAGE_DIGEST)"
      - name: "IMAGE_URL"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-sbom-json-check:0.1"
        - name: "name"
          value: "sbom-json-check"
        - name: "kind"
          value: "task"
        resolver: "bundles"
  timeouts:
    pipeline: "900000000000ns"
  workspaces:
  - name: "workspace"
    volumeClaimTemplate:
      apiVersion: "v1"
      kind: "PersistentVolumeClaim"
      spec:
        accessModes:
        - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
  - name: "git-auth"
    secret:
      secretName: "{{ git_auth_secret }}"
